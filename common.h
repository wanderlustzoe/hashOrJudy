#pragma once

#include <config.h>     // autogenerated by CMake
#include <vector>
#include <algorithm>
#include <windows.h>
#include <intrin.h>
#include "mersennetwister.h"
#include "cachestomper.h"
#include "timer.h"
#include "randomsequence.h"


#if INTEGER_MAP_USE_DLMALLOC
extern "C"
{
    void* dlmalloc(size_t);
    void  dlfree(void*);
}
inline void* operator new(size_t size) { return dlmalloc(size); }
inline void operator delete(void* p) { return dlfree(p); }
#endif

#if INTEGER_MAP_CONTAINER(JUDY)
    #define JUDYERROR_NOTEST
    #include <Judy.h>

    #define MAP_DECLARE         Pvoid_t judy
    #define MAP_INITIALIZE()    { judy = NULL; }
    #define MAP_INCREMENT(key)  { Pvoid_t value; \
                                JLI(value, judy, (key)); \
                                (*(size_t*) value)++; }
    #define MAP_CLEAR()         { Word_t Rc_word; \
                                JLFA(Rc_word, judy); \
                                judy = NULL; }

#elif INTEGER_MAP_CONTAINER(TABLE)
    #include "hashtable.h"

    #define MAP_DECLARE         HashTable ht
    #define MAP_INITIALIZE()
    #define MAP_INCREMENT(key)  ht.Insert(key)->value++
    #define MAP_CLEAR()         { ht.Clear(); \
                                ht.Compact(); }

#else
    #define MAP_DECLARE         
    #define MAP_INITIALIZE()
    #define MAP_INCREMENT(key)  
    #define MAP_CLEAR()

#endif

void GenerateKeys(std::vector<size_t>& m_keys, int keyCount, int M);


//---------------------------------------------------
// Test parameters
//---------------------------------------------------
struct TestParams
{
    int seed;
    int operationsPerGroup;
    int keyCount;
    int granularity;
    int stompBytes;
    MersenneTwister random;

    void DefineMarkers(std::vector<int>& markers);
};

extern TestParams g_Params;


struct ResultHolder
{
    struct Result
    {
        int marker;
        double nanosecs;
    };

    std::vector<Result> results;

    void dump();
};
